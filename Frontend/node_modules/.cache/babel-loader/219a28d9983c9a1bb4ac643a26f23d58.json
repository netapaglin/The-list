{"ast":null,"code":"import axios from \"axios\";\nimport store from \"../Redux/Store\";\nimport { addTaskAction, deleteTaskAction, fetchTaskAction, updateTaskAction } from \"../Redux/TaskState\";\nimport config from \"../Utils/Config\";\nclass TasksService {\n  // Get all tasks: \n  async getAllTasks() {\n    if (store.getState().tasksState.tasks.length === 0) {\n      const response = await axios.get(config.tasksUrl);\n      const tasks = response.data;\n      store.dispatch(fetchTaskAction(tasks));\n    }\n    return store.getState().tasksState.tasks;\n  }\n  async getTasksByList(listId) {\n    // if (store.getState().tasksState.tasks.length === 0) {\n    console.log(\"first\");\n    const response = await axios.get(config.tasksByListUrl + listId);\n    const tasks = response.data;\n    store.dispatch(fetchTaskAction(tasks));\n    return store.getState().tasksState.tasks;\n  }\n\n  // Add task: \n  async addTask(task, listId) {\n    task.done = false;\n    const response = await axios.post(config.addTaskUrl + listId, task);\n    store.dispatch(addTaskAction(response.data));\n    return response.data;\n  }\n\n  // Edit task: \n  async editTask(task, taskId, dispatch) {\n    const response = await axios.put(config.editTaskUrl + taskId, task);\n    dispatch(updateTaskAction(response.data));\n    return response.data;\n  }\n\n  // Delete task: \n  async deleteTasks(taskId) {\n    await axios.delete(config.deletetasksUrl + taskId);\n    store.dispatch(deleteTaskAction(taskId));\n  }\n}\nconst tasksService = new TasksService();\nexport default tasksService;","map":{"version":3,"names":["axios","store","addTaskAction","deleteTaskAction","fetchTaskAction","updateTaskAction","config","TasksService","getAllTasks","getState","tasksState","tasks","length","response","get","tasksUrl","data","dispatch","getTasksByList","listId","console","log","tasksByListUrl","addTask","task","done","post","addTaskUrl","editTask","taskId","put","editTaskUrl","deleteTasks","delete","deletetasksUrl","tasksService"],"sources":["C:/Users/Neta/Documents/full stack/The list/Frontend/src/Services/task-service.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport TaskModel from \"../Models/TaskModel\";\r\nimport store from \"../Redux/Store\";\r\nimport { addTaskAction, deleteTaskAction, fetchTaskAction, updateTaskAction } from \"../Redux/TaskState\";\r\nimport config from \"../Utils/Config\";\r\nimport listsService from \"./list-service\";\r\n\r\nclass TasksService {\r\n\r\n    // Get all tasks: \r\n    public async getAllTasks(): Promise<TaskModel[]> {\r\n        if (store.getState().tasksState.tasks.length === 0) {\r\n            const response = await axios.get<TaskModel[]>(config.tasksUrl);\r\n            const tasks = response.data;\r\n            store.dispatch(fetchTaskAction(tasks))\r\n        }\r\n\r\n        return store.getState().tasksState.tasks\r\n    }\r\n\r\n\r\n    public async getTasksByList(listId: string): Promise<TaskModel[]> {\r\n\r\n        // if (store.getState().tasksState.tasks.length === 0) {\r\n        console.log(\"first\")\r\n        const response = await axios.get<TaskModel[]>(config.tasksByListUrl + listId);\r\n        const tasks = response.data;\r\n        store.dispatch(fetchTaskAction(tasks))\r\n      \r\n        return store.getState().tasksState.tasks\r\n    }\r\n\r\n    // Add task: \r\n    public async addTask(task: TaskModel, listId: string): Promise<TaskModel> {\r\n        task.done = false\r\n        const response = await axios.post<TaskModel>(config.addTaskUrl + listId, task);\r\n        store.dispatch(addTaskAction(response.data));\r\n        return response.data;\r\n    }\r\n\r\n    // Edit task: \r\n    public async editTask(task: TaskModel, taskId: string, dispatch: any): Promise<TaskModel> {\r\n        const response = await axios.put<TaskModel>(config.editTaskUrl + taskId, task);\r\n        dispatch(updateTaskAction(response.data));\r\n        return response.data;\r\n    }\r\n\r\n    // Delete task: \r\n    public async deleteTasks(taskId: string): Promise<void> {\r\n        await axios.delete(config.deletetasksUrl + taskId);\r\n        store.dispatch(deleteTaskAction(taskId));\r\n    }\r\n\r\n}\r\n\r\nconst tasksService = new TasksService()\r\nexport default tasksService;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAOC,KAAK,MAAM,gBAAgB;AAClC,SAASC,aAAa,EAAEC,gBAAgB,EAAEC,eAAe,EAAEC,gBAAgB,QAAQ,oBAAoB;AACvG,OAAOC,MAAM,MAAM,iBAAiB;AAGpC,MAAMC,YAAY,CAAC;EAEf;EACA,MAAaC,WAAW,GAAyB;IAC7C,IAAIP,KAAK,CAACQ,QAAQ,EAAE,CAACC,UAAU,CAACC,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MAChD,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAcR,MAAM,CAACS,QAAQ,CAAC;MAC9D,MAAMJ,KAAK,GAAGE,QAAQ,CAACG,IAAI;MAC3Bf,KAAK,CAACgB,QAAQ,CAACb,eAAe,CAACO,KAAK,CAAC,CAAC;IAC1C;IAEA,OAAOV,KAAK,CAACQ,QAAQ,EAAE,CAACC,UAAU,CAACC,KAAK;EAC5C;EAGA,MAAaO,cAAc,CAACC,MAAc,EAAwB;IAE9D;IACAC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IACpB,MAAMR,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAcR,MAAM,CAACgB,cAAc,GAAGH,MAAM,CAAC;IAC7E,MAAMR,KAAK,GAAGE,QAAQ,CAACG,IAAI;IAC3Bf,KAAK,CAACgB,QAAQ,CAACb,eAAe,CAACO,KAAK,CAAC,CAAC;IAEtC,OAAOV,KAAK,CAACQ,QAAQ,EAAE,CAACC,UAAU,CAACC,KAAK;EAC5C;;EAEA;EACA,MAAaY,OAAO,CAACC,IAAe,EAAEL,MAAc,EAAsB;IACtEK,IAAI,CAACC,IAAI,GAAG,KAAK;IACjB,MAAMZ,QAAQ,GAAG,MAAMb,KAAK,CAAC0B,IAAI,CAAYpB,MAAM,CAACqB,UAAU,GAAGR,MAAM,EAAEK,IAAI,CAAC;IAC9EvB,KAAK,CAACgB,QAAQ,CAACf,aAAa,CAACW,QAAQ,CAACG,IAAI,CAAC,CAAC;IAC5C,OAAOH,QAAQ,CAACG,IAAI;EACxB;;EAEA;EACA,MAAaY,QAAQ,CAACJ,IAAe,EAAEK,MAAc,EAAEZ,QAAa,EAAsB;IACtF,MAAMJ,QAAQ,GAAG,MAAMb,KAAK,CAAC8B,GAAG,CAAYxB,MAAM,CAACyB,WAAW,GAAGF,MAAM,EAAEL,IAAI,CAAC;IAC9EP,QAAQ,CAACZ,gBAAgB,CAACQ,QAAQ,CAACG,IAAI,CAAC,CAAC;IACzC,OAAOH,QAAQ,CAACG,IAAI;EACxB;;EAEA;EACA,MAAagB,WAAW,CAACH,MAAc,EAAiB;IACpD,MAAM7B,KAAK,CAACiC,MAAM,CAAC3B,MAAM,CAAC4B,cAAc,GAAGL,MAAM,CAAC;IAClD5B,KAAK,CAACgB,QAAQ,CAACd,gBAAgB,CAAC0B,MAAM,CAAC,CAAC;EAC5C;AAEJ;AAEA,MAAMM,YAAY,GAAG,IAAI5B,YAAY,EAAE;AACvC,eAAe4B,YAAY"},"metadata":{},"sourceType":"module"}